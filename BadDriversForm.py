# Form implementation generated from reading ui file 'BadDriversForm.ui'
#
# Created by: PyQt6 UI code generator 6.2.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
import datetime

from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QHeaderView
import bd_main


class Ui_BadDriversForm(object):
    def setupUi(self, BadDriversForm):
        self.con = bd_main.connect()
        self.mycursor = self.con.cursor()
        BadDriversForm.setObjectName("BadDriversForm")
        BadDriversForm.resize(500, 400)
        self.ListLabel = QtWidgets.QLabel(BadDriversForm)
        self.ListLabel.setGeometry(QtCore.QRect(0, 30, 500, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.ListLabel.setFont(font)
        self.ListLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.ListLabel.setWordWrap(True)
        self.ListLabel.setObjectName("ListLabel")
        self.DescriptionLabel = QtWidgets.QLabel(BadDriversForm)
        self.DescriptionLabel.setGeometry(QtCore.QRect(100, 70, 300, 30))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.DescriptionLabel.setFont(font)
        self.DescriptionLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.DescriptionLabel.setWordWrap(True)
        self.DescriptionLabel.setObjectName("DescriptionLabel")
        self.tableWidget = QtWidgets.QTableWidget(BadDriversForm)
        self.tableWidget.setGeometry(QtCore.QRect(30, 120, 440, 250))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(3)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        self.tableWidget.horizontalHeader().setSectionResizeMode(1, QHeaderView.ResizeMode.Stretch)
        self.tableWidget.verticalHeader().setVisible(False)
        self.tableWidget.setEditTriggers(QtWidgets.QAbstractItemView.EditTrigger(False))

        self.retranslateUi(BadDriversForm)
        QtCore.QMetaObject.connectSlotsByName(BadDriversForm)

        self.FillTable()

    def retranslateUi(self, BadDriversForm):
        _translate = QtCore.QCoreApplication.translate
        BadDriversForm.setWindowTitle(_translate("BadDriversForm", "Список злостных водителей"))
        self.ListLabel.setText(_translate("BadDriversForm", "Список «злостных» водителей"))
        self.DescriptionLabel.setText(_translate("BadDriversForm", "Под злостными нарушителями по штрафам считаются водители, имеющие 3 и более неоплаченных штрафа"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("BadDriversForm", "ID водителя"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("BadDriversForm", "ФИО"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("BadDriversForm", "Группа"))

    def AddRow(self, driver_ID, FCS, group):
        rowPosition = self.tableWidget.rowCount()
        self.tableWidget.insertRow(rowPosition)

        self.tableWidget.setItem(rowPosition, 0, QtWidgets.QTableWidgetItem(str(driver_ID)))
        self.tableWidget.setItem(rowPosition, 1, QtWidgets.QTableWidgetItem(FCS))
        self.tableWidget.setItem(rowPosition, 2, QtWidgets.QTableWidgetItem(group))

    def FillTable(self):
        query = f"SELECT driver_ID, FCS FROM driver_list WHERE fine_count >= 3;"
        self.mycursor.execute(query)
        self.con.commit()
        allDrivers = self.mycursor.fetchall()
        for i in range(0, len(allDrivers)):
            self.AddRow(allDrivers[i][0], allDrivers[i][1], 'По штрафам')
        self.FillTableNonPayment(allDrivers)

    def FillTableNonPayment(self, allDriverWith3Fines):
        query = f"SELECT driver_ID, FCS, date_of_the_fine FROM driver_violation WHERE has_the_fine_been_paid = 0;"
        self.mycursor.execute(query)
        self.con.commit()
        allDrivers = self.mycursor.fetchall()
        date_str = str(datetime.date.today() - datetime.timedelta(days=30))
        driversForAdd = []
        iter = 0
        for i in range(0, len(allDrivers)):
            match = 0
            for j in range(0, len(allDriverWith3Fines)):
                if (allDrivers[i][0] == allDriverWith3Fines[j][0]):
                    match = 1
                    break
                elif (not (allDrivers[i] in driversForAdd) and str(allDrivers[i][2]) <= date_str):
                    driversForAdd.append(allDrivers[i][0])
        driversForPrint = []
        for i in range(0, len(driversForAdd)):
            if (not (driversForAdd[i] in driversForPrint)):
                driversForPrint.append(driversForAdd[i])
        for i in range(0, len(driversForPrint)):
            query = f"SELECT FCS FROM driver_list WHERE driver_ID = {driversForPrint[i]}"
            self.mycursor.execute(query)
            self.con.commit()
            (FCS,) = self.mycursor.fetchone()
            self.AddRow(driversForPrint[i], FCS, 'Не оплачено всрок')