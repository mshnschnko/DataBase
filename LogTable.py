# Form implementation generated from reading ui file 'LogTable.ui'
#
# Created by: PyQt6 UI code generator 6.2.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QHeaderView
import bd_main

class Ui_Form(object):
    def setupUi(self, Form):
        self.con = bd_main.connect()
        self.mycursor = self.con.cursor()
        Form.setObjectName("Form")
        Form.resize(650, 450)
        self.logLabel = QtWidgets.QLabel(Form)
        self.logLabel.setGeometry(QtCore.QRect(248, 20, 154, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.logLabel.setFont(font)
        self.logLabel.setObjectName("logLabel")
        self.logTable = QtWidgets.QTableWidget(Form)
        self.logTable.setGeometry(QtCore.QRect(20, 90, 610, 345))
        self.logTable.setObjectName("logTable")
        self.logTable.setColumnCount(5)
        self.logTable.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.logTable.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.logTable.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.logTable.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.logTable.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.logTable.setHorizontalHeaderItem(4, item)
        self.logTable.horizontalHeader().setCascadingSectionResizes(False)
        self.logTable.horizontalHeader().setSortIndicatorShown(True)
        self.logTable.horizontalHeader().setStretchLastSection(False)
        self.logTable.setSortingEnabled(True)
        self.listWidget = QtWidgets.QListWidget(Form)
        self.listWidget.setGeometry(QtCore.QRect(90, 75, 516, 90))
        self.listWidget.setSelectionRectVisible(False)
        self.listWidget.setObjectName("listWidget")
        self.listWidget.setVisible(False)
        #self.comboBoxFCS = QtWidgets.QComboBox(Form)
        #self.comboBoxFCS.setGeometry(QtCore.QRect(90, 50, 540, 25))
        #self.comboBoxFCS.setEditable(True)
        #self.comboBoxFCS.setObjectName("comboBoxFCS")
        self.FCSedit = QtWidgets.QPlainTextEdit(Form)
        self.FCSedit.setGeometry(QtCore.QRect(90, 50, 540, 25))
        self.FCSedit.setObjectName("FCSedit")
        self.FCSedit.setPlaceholderText("Введите имя...")
        self.ClearName = QtWidgets.QPushButton(Form)
        self.ClearName.setGeometry(QtCore.QRect(604, 49, 27, 27))
        self.ClearName.setObjectName("ClearName")
        self.labelDriver = QtWidgets.QLabel(Form)
        self.labelDriver.setGeometry(QtCore.QRect(20, 50, 55, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.labelDriver.setFont(font)
        self.labelDriver.setObjectName("labelDriver")
        self.logTable.horizontalHeader().setSectionResizeMode(0, QHeaderView.ResizeMode.ResizeToContents)
        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

        self.logTable.setEditTriggers(QtWidgets.QAbstractItemView.EditTrigger(False))
        self.logTable.verticalHeader().setVisible(False)
        #self.FillComboBox()
        #self.FillTable()
        #self.comboBoxFCS.editTextChanged.connect(lambda: self.FillListWidget())
        self.FCSedit.textChanged.connect(lambda: self.FillListWidget())
        self.listWidget.itemActivated.connect(lambda: self.SelfFCSText(self.listWidget.currentItem()))
        self.listWidget.currentItemChanged.connect(lambda: self.FillTable())
        self.ClearName.clicked.connect(lambda: self.ClearEnterName())
        #self.comboBoxFCS.currentTextChanged.connect(lambda: self.FillTable())


    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "История водителя"))
        self.logLabel.setText(_translate("Form", "История водителя"))
        item = self.logTable.horizontalHeaderItem(0)
        item.setText(_translate("Form", "Нарушение"))
        item = self.logTable.horizontalHeaderItem(1)
        item.setText(_translate("Form", "Сумма"))
        item = self.logTable.horizontalHeaderItem(2)
        item.setText(_translate("Form", "Дата штрафа"))
        item = self.logTable.horizontalHeaderItem(3)
        item.setText(_translate("Form", "Оплачен"))
        item = self.logTable.horizontalHeaderItem(4)
        item.setText(_translate("Form", "Дата оплаты"))
        self.labelDriver.setText(_translate("Form", "Водитель"))
        self.ClearName.setText(_translate("Form", "✕"))

    def ClearEnterName(self):
        self.FCSedit.clear()

    #def addItemDriver(self, driverID, FCS):
        #self.comboBoxFCS.addItem(f"({str(driverID)}) {FCS}")

    def SelfFCSText(self, item):
        #print(str(item.text()))
        self.FCSedit.setPlainText(str(item.text()))
        self.listWidget.setVisible(False)

    #def FillComboBox(self):
        #query = "SELECT driver_ID, FCS FROM driver_list"
        #self.mycursor.execute(query)
        #self.con.commit()
        #allIDandNames = self.mycursor.fetchall()
        #countOfNames = len(allIDandNames)
        #for i in range(0, countOfNames):
            #self.addItemDriver(allIDandNames[i][0], allIDandNames[i][1])

    def AddRow(self, relation_ID, violation, sum, dateOfTheFine, hasTheFineBeenPaid):
        rowPosition = self.logTable.rowCount()
        self.logTable.insertRow(rowPosition)

        self.logTable.setItem(rowPosition, 0, QtWidgets.QTableWidgetItem(violation))
        self.logTable.setItem(rowPosition, 1, QtWidgets.QTableWidgetItem(str(sum)))
        self.logTable.setItem(rowPosition, 2, QtWidgets.QTableWidgetItem(str(dateOfTheFine)))
        if (hasTheFineBeenPaid == 0):
            self.logTable.setItem(rowPosition, 3, QtWidgets.QTableWidgetItem('Не оплачен'))
        else:
            query = f"SELECT pay_date FROM bank WHERE check_ID = {relation_ID}"
            self.mycursor.execute(query)
            self.con.commit()
            (pay_date,) = self.mycursor.fetchone()
            self.logTable.setItem(rowPosition, 3, QtWidgets.QTableWidgetItem('Оплачен'))
            self.logTable.setItem(rowPosition, 4, QtWidgets.QTableWidgetItem(str(pay_date)))

    def FillTable(self):
        if (len(str(self.text)) > 8):
            self.logTable.clearContents()
            self.logTable.setRowCount(0)
            FCSText = str(self.text)
            symbol = FCSText[2]
            i = 1
            while symbol != ')':
                i += 1
                symbol = FCSText[i+1]
            driver_ID = FCSText[1:i + 1]
            FCSText = FCSText[i + 3:]
            driver_ID = int(driver_ID)
            query = f"SELECT * FROM driver_violation WHERE driver_ID = {driver_ID}"
            self.mycursor.execute(query)
            self.con.commit()
            allInfo = self.mycursor.fetchall()
            countIfViolations = len(allInfo)
            for i in range(0, countIfViolations):
                query = f"SELECT violation FROM violation_list WHERE violation_ID = {allInfo[i][3]}"
                self.mycursor.execute(query)
                self.con.commit()
                (violation,) = self.mycursor.fetchone()
                self.AddRow(allInfo[i][0], violation, allInfo[i][6], allInfo[i][5], allInfo[i][4])

    def addItemDriverToListWidget(self, driver_ID, FCS):
        self.listWidget.addItem(f"({str(driver_ID)}) {FCS}")

    def FillListWidget(self):
        self.text = self.FCSedit.toPlainText()
        self.listWidget.clear()
        if (len(self.text) == 0):
            self.listWidget.setVisible(False)
            self.logTable.clearContents()
            self.logTable.setRowCount(0)
        else:
            self.listWidget.setVisible(True)
            query = f"SELECT driver_ID, FCS FROM driver_list WHERE FCS LIKE '%{(self.text)}%'"
            self.mycursor.execute(query)
            self.con.commit()
            allIDandNames = self.mycursor.fetchall()
            countOfNames = len(allIDandNames)
            for i in range(0, countOfNames):
                self.addItemDriverToListWidget(allIDandNames[i][0], allIDandNames[i][1])