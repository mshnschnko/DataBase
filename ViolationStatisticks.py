# Form implementation generated from reading ui file 'ViolationStatisticks.ui'
#
# Created by: PyQt6 UI code generator 6.2.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
import datetime

from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QHeaderView
from PyQt6.QtCore import QDate
import bd_main


class Ui_ViolationStatisticks(object):
    def setupUi(self, ViolationStatisticks):
        self.con = bd_main.connect()
        self.mycursor = self.con.cursor()
        ViolationStatisticks.setObjectName("ViolationStatisticks")
        ViolationStatisticks.resize(520, 400)
        self.StatisticsLabel = QtWidgets.QLabel(ViolationStatisticks)
        self.StatisticsLabel.setGeometry(QtCore.QRect(0, 30, 520, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.StatisticsLabel.setFont(font)
        self.StatisticsLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.StatisticsLabel.setObjectName("StatisticsLabel")
        self.BeginDate = QtWidgets.QDateEdit(ViolationStatisticks)
        self.BeginDate.setGeometry(QtCore.QRect(140, 80, 110, 22))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.BeginDate.setFont(font)
        self.BeginDate.setCalendarPopup(True)
        self.BeginDate.setMinimumDate(QDate.currentDate().addDays(-365))
        self.BeginDate.setMaximumDate(QDate.currentDate())
        self.BeginDate.setObjectName("BeginDate")
        self.EndDate = QtWidgets.QDateEdit(ViolationStatisticks)
        self.EndDate.setGeometry(QtCore.QRect(300, 80, 110, 22))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.EndDate.setFont(font)
        self.EndDate.setCalendarPopup(True)
        self.EndDate.setMinimumDate(QDate.currentDate().addDays(-365))
        self.EndDate.setMaximumDate(QDate.currentDate())
        self.EndDate.setObjectName("EndDate")
        self.BeginLabel = QtWidgets.QLabel(ViolationStatisticks)
        self.BeginLabel.setGeometry(QtCore.QRect(115, 80, 10, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.BeginLabel.setFont(font)
        self.BeginLabel.setObjectName("BeginLabel")
        self.EndLabel = QtWidgets.QLabel(ViolationStatisticks)
        self.EndLabel.setGeometry(QtCore.QRect(270, 80, 20, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.EndLabel.setFont(font)
        self.EndLabel.setObjectName("EndLabel")
        self.tableWidget = QtWidgets.QTableWidget(ViolationStatisticks)
        self.tableWidget.setGeometry(QtCore.QRect(30, 120, 460, 220))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(3)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        self.tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.ResizeToContents)
        self.tableWidget.setEditTriggers(QtWidgets.QAbstractItemView.EditTrigger(False))
        self.tableWidget.verticalHeader().setVisible(False)
        self.ApplyBtn = QtWidgets.QPushButton(ViolationStatisticks)
        self.ApplyBtn.setGeometry(QtCore.QRect(415, 360, 75, 23))
        self.ApplyBtn.setEnabled(False)
        self.ApplyBtn.setObjectName("ApplyBtn")

        self.retranslateUi(ViolationStatisticks)
        QtCore.QMetaObject.connectSlotsByName(ViolationStatisticks)

        self.BeginDate.dateChanged.connect(lambda: self.Date_slot())
        self.EndDate.dateChanged.connect(lambda: self.Date_slot())
        self.ApplyBtn.clicked.connect(lambda: self.FillTable())

    def retranslateUi(self, ViolationStatisticks):
        _translate = QtCore.QCoreApplication.translate
        ViolationStatisticks.setWindowTitle(_translate("ViolationStatisticks", "Статистика по нарушениям"))
        self.StatisticsLabel.setText(_translate("ViolationStatisticks", "Статистика по нарушениям"))
        self.BeginLabel.setText(_translate("ViolationStatisticks", "С"))
        self.EndLabel.setText(_translate("ViolationStatisticks", "По"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("ViolationStatisticks", "ID нарушения"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("ViolationStatisticks", "Нарушение"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("ViolationStatisticks", "Кол-во"))
        self.ApplyBtn.setText(_translate("ViolationStatisticks", "Принять"))

    def Date_slot(self):
        self.BeginDate_str = self.BeginDate.date().toString('yyyy-MM-dd')
        self.EndDate_str = self.EndDate.date().toString('yyyy-MM-dd')
        self.ApplyBtn.setEnabled(True)

    def AddRow(self, violation_ID, violation, count):
        rowPosition = self.tableWidget.rowCount()
        self.tableWidget.insertRow(rowPosition)

        self.tableWidget.setItem(rowPosition, 0, QtWidgets.QTableWidgetItem(str(violation_ID)))
        self.tableWidget.setItem(rowPosition, 1, QtWidgets.QTableWidgetItem(violation))
        self.tableWidget.setItem(rowPosition, 2, QtWidgets.QTableWidgetItem(str(count)))

    def FillTable(self):
        self.tableWidget.clearContents()
        self.tableWidget.setRowCount(0)
        query = f"SELECT violation_ID, violation FROM violation_list;"
        self.mycursor.execute(query)
        self.con.commit()
        allViolations = self.mycursor.fetchall()
        list_violation = []
        for i in range(0, len(allViolations)):
            query = f"SELECT date_of_the_fine FROM driver_violation WHERE (violation_ID = {allViolations[i][0]}) AND (date_of_the_fine BETWEEN \"{self.BeginDate_str}\" AND \"{self.EndDate_str}\");"
            self.mycursor.execute(query)
            self.con.commit()
            currentViolation = self.mycursor.fetchall()
            count = len(currentViolation)
            current = [count, allViolations[i][0], allViolations[i][1]]
            list_violation.append(current)
        list_violation.sort(reverse=True)
        for i in range(0, len(list_violation)):
            self.AddRow(list_violation[i][1], list_violation[i][2], list_violation[i][0])