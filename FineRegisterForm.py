# Form implementation generated from reading ui file 'FineRegisterForm.ui'
#
# Created by: PyQt6 UI code generator 6.2.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
import datetime

from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QMessageBox, QDateEdit
from PyQt6.QtCore import QDate

import SubpoenaTableForm
import bd_main


class Ui_FineRegisterForm(object):
    def setupUi(self, FineRegisterForm):
        self.con = bd_main.connect()
        self.mycursor = self.con.cursor()
        FineRegisterForm.setObjectName("FineRegisterForm")
        FineRegisterForm.resize(500, 230)
        font = QtGui.QFont()
        font.setPointSize(10)
        FineRegisterForm.setFont(font)
        #self.comboBoxFCS = QtWidgets.QComboBox(FineRegisterForm)
        #self.comboBoxFCS.setGeometry(QtCore.QRect(110, 70, 370, 25))
        #self.comboBoxFCS.setObjectName("comboBoxFCS")
        self.FCSPlainText = QtWidgets.QPlainTextEdit(FineRegisterForm)
        self.FCSPlainText.setGeometry(QtCore.QRect(110, 68, 370, 30))
        self.FCSPlainText.setObjectName("FCSPlainText")
        self.FCSPlainText.setPlaceholderText("Введите имя...")
        self.ClearName = QtWidgets.QPushButton(FineRegisterForm)
        self.ClearName.setGeometry(QtCore.QRect(450, 67, 32, 32))
        self.ClearName.setObjectName("ClearName")
        self.FineRegister = QtWidgets.QLabel(FineRegisterForm)
        self.FineRegister.setGeometry(QtCore.QRect(0, 30, 500, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.FineRegister.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading | QtCore.Qt.AlignmentFlag.AlignHCenter | QtCore.Qt.AlignmentFlag.AlignVCenter)
        #font.setBold(True)
        #font.setWeight(75)
        self.FineRegister.setFont(font)
        self.FineRegister.setObjectName("FineRegister")
        #self.comboBoxViolation = QtWidgets.QComboBox(FineRegisterForm)
        #self.comboBoxViolation.setGeometry(QtCore.QRect(110, 110, 370, 25))
        #self.comboBoxViolation.setObjectName("comboBoxViolation")
        self.violationPlainText = QtWidgets.QPlainTextEdit(FineRegisterForm)
        self.violationPlainText.setGeometry(QtCore.QRect(110, 108, 370, 30))
        self.violationPlainText.setObjectName("violationPlainText")
        self.violationPlainText.setPlaceholderText("Введите наименование нарушения...")
        self.ClearViolation = QtWidgets.QPushButton(FineRegisterForm)
        self.ClearViolation.setGeometry(QtCore.QRect(450, 107, 32, 32))
        self.ClearViolation.setObjectName("ClearViolation")
        self.labelDriver = QtWidgets.QLabel(FineRegisterForm)
        self.labelDriver.setGeometry(QtCore.QRect(25, 70, 60, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.labelDriver.setFont(font)
        self.labelDriver.setObjectName("labelDriver")
        self.labelViolation = QtWidgets.QLabel(FineRegisterForm)
        self.labelViolation.setGeometry(QtCore.QRect(25, 110, 70, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.labelViolation.setFont(font)
        self.labelViolation.setObjectName("labelViolation")
        self.dateLabel = QtWidgets.QLabel(FineRegisterForm)
        self.dateLabel.setGeometry(QtCore.QRect(25, 150, 47, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.dateLabel.setFont(font)
        self.dateLabel.setObjectName("label")
        self.dateEdit = QtWidgets.QDateEdit(FineRegisterForm)
        self.dateEdit.setGeometry(QtCore.QRect(110, 150, 90, 25))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.dateEdit.setFont(font)
        self.dateEdit.setCalendarPopup(True)
        self.dateEdit.setObjectName("dateEdit")
        self.dateEdit.setMinimumDate(QDate.currentDate().addDays(-370))
        self.dateEdit.setMaximumDate(QDate.currentDate())
        self.applyButton = QtWidgets.QPushButton(FineRegisterForm)
        self.applyButton.setGeometry(QtCore.QRect(405, 190, 75, 23))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.applyButton.setFont(font)
        self.applyButton.setObjectName("applyButton")
        self.applyButton.setEnabled(False)
        self.FCSlistWidget = QtWidgets.QListWidget(FineRegisterForm)
        self.FCSlistWidget.setGeometry(QtCore.QRect(110, 97, 346, 90))
        self.FCSlistWidget.setSelectionRectVisible(False)
        self.FCSlistWidget.setObjectName("FCSlistWidget")
        self.FCSlistWidget.setVisible(False)

        self.violationlistWidget = QtWidgets.QListWidget(FineRegisterForm)
        self.violationlistWidget.setGeometry(QtCore.QRect(110, 137, 346, 90))
        self.violationlistWidget.setSelectionRectVisible(False)
        self.violationlistWidget.setObjectName("violationlistWidget")
        self.violationlistWidget.setVisible(False)

        self.retranslateUi(FineRegisterForm)
        QtCore.QMetaObject.connectSlotsByName(FineRegisterForm)

        #self.FillComboBox()
        self.FCSPlainText.textChanged.connect(lambda: self.FillFCSListWidget())
        self.violationPlainText.textChanged.connect(lambda: self.FillViolationListWidget())
        self.FCSlistWidget.itemActivated.connect(lambda: self.SetFCSPlainText(self.FCSlistWidget.currentItem()))
        self.violationlistWidget.itemActivated.connect(lambda: self.SetViolationPlainText(self.violationlistWidget.currentItem()))
        self.applyButton.clicked.connect(lambda: self.FineRegisterFunc())
        self.dateEdit.dateChanged.connect(lambda: self.date_slot())
        self.ClearName.clicked.connect(lambda: self.ClearEnterName())
        self.ClearViolation.clicked.connect(lambda: self.ClearEnterViolation())

    def retranslateUi(self, FineRegisterForm):
        _translate = QtCore.QCoreApplication.translate
        FineRegisterForm.setWindowTitle(_translate("FineRegisterForm", "Регистрация штрафа"))
        self.FineRegister.setText(_translate("FineRegisterForm", "Регистрация штрафа"))
        self.labelDriver.setText(_translate("FineRegisterForm", "Водитель"))
        self.labelViolation.setText(_translate("FineRegisterForm", "Нарушение"))
        self.dateLabel.setText(_translate("Form", "Дата"))
        self.applyButton.setText(_translate("FineRegisterForm", "Принять"))
        self.ClearName.setText(_translate("Form", "✕"))
        self.ClearViolation.setText(_translate("Form", "✕"))

    def SetFCSPlainText(self, item):
        self.FCSPlainText.setPlainText(str(item.text()))
        self.FCSlistWidget.setVisible(False)

    def SetViolationPlainText(self, item):
        self.violationPlainText.setPlainText(str(item.text()))
        self.violationlistWidget.setVisible(False)

    def ClearEnterName(self):
        self.FCSPlainText.clear()

    def ClearEnterViolation(self):
        self.violationPlainText.clear()

    def FillFCSListWidget(self):
        self.FCStext = self.FCSPlainText.toPlainText()
        self.FCSlistWidget.clear()
        if (len(self.FCStext) == 0):
            self.FCSlistWidget.setVisible(False)
        else:
            self.FCSlistWidget.setVisible(True)
            query = f"SELECT driver_ID, FCS FROM driver_list WHERE FCS LIKE '%{(self.FCStext)}%'"
            self.mycursor.execute(query)
            self.con.commit()
            allIDandNames = self.mycursor.fetchall()
            countOfNames = len(allIDandNames)
            for i in range(0, countOfNames):
                self.addItemDriver(allIDandNames[i][0], allIDandNames[i][1])

    def FillViolationListWidget(self):
        self.violationText = self.violationPlainText.toPlainText()
        self.violationlistWidget.clear()
        if (len(self.violationText) == 0):
            self.violationlistWidget.setVisible(False)
        else:
            self.violationlistWidget.setVisible(True)
            query = f"SELECT violation FROM violation_list WHERE violation LIKE '%{(self.violationText)}%'"
            self.mycursor.execute(query)
            self.con.commit()
            allViolations = self.mycursor.fetchall()
            countOfViolations = len(allViolations)
            for i in range(0, countOfViolations):
                self.addItemViolation(allViolations[i][0])

    def addItemDriver(self, driverID, FCS):
        self.FCSlistWidget.addItem(f"({str(driverID)}) {FCS}")

    def addItemViolation(self, violation):
        self.violationlistWidget.addItem(violation)

    def date_slot(self):
        self.date = self.dateEdit.date().toString('yyyy-MM-dd')
        self.applyButton.setEnabled(True)

    '''def FillComboBox(self):
        query = "SELECT driver_ID, FCS FROM driver_list"
        self.mycursor.execute(query)
        self.con.commit()
        allIDandNames = self.mycursor.fetchall()
        countOfNames = len(allIDandNames)
        for i in range(0, countOfNames):
            self.addItemDriver(allIDandNames[i][0], allIDandNames[i][1])
        query = "SELECT violation FROM violation_list"
        self.mycursor.execute(query)
        self.con.commit()
        allViolations = self.mycursor.fetchall()
        countOfViolations = len(allViolations)
        for i in range(0, countOfViolations):
            self.addItemViolation(allViolations[i][0])'''

    def FineRegisterFunc(self):
        FCS = str(self.FCStext)
        symbol = FCS[2]
        i = 1
        while symbol != ')':
            i += 1
            symbol = FCS[i+1]
        driver_ID = FCS[1:i + 1]
        FCS = FCS[i + 3:]
        driver_ID = int(driver_ID)
        violation = str(self.violationText)
        violation_query = f"SELECT violation_ID, sum FROM violation_list where violation = '{violation}'"
        self.mycursor.execute(violation_query)
        self.con.commit()
        (violation_ID, sum) = self.mycursor.fetchone()

        if (str(datetime.date.today()) >= self.date):
            query = f"SELECT fine_count FROM driver_list WHERE driver_ID = {driver_ID}"
            self.mycursor.execute(query)
            self.con.commit()
            (fineCount,) = self.mycursor.fetchone()
            factor = 0
            if (fineCount != 0):
                query = f"SELECT relation_ID, date_of_the_fine FROM driver_violation WHERE driver_ID = {driver_ID} AND has_the_fine_been_paid = 0;"
                self.mycursor.execute(query)
                self.con.commit()
                fines = self.mycursor.fetchall()
                finesLen = len(fines)
                dateOfLatestFine = str(fines[0][1])
                for i in range (0, finesLen):
                    if (str(fines[i][1]) >= dateOfLatestFine):
                        dateOfLatestFine = str(fines[i][1])
                latestFineYear = int(dateOfLatestFine[0:4])
                currentYear = int(self.date[0:4])
                if (currentYear - latestFineYear == 1):
                    latestFineMonth = int(dateOfLatestFine[5:7])
                    currentMonth = int(self.date[5:7])
                    if (currentMonth < latestFineMonth):
                        factor = 0.1
                    elif (currentMonth == latestFineMonth):
                        latestFineDay = int(dateOfLatestFine[8:10])
                        currentDay = int(self.date[8:10])
                        if (currentDay < latestFineDay):
                            factor = 0.1
                elif (currentYear - latestFineYear == 0):
                    factor = 0.1
            query_keys_not_check = "SET FOREIGN_KEY_CHECKS = 0;"
            self.mycursor.execute(query_keys_not_check)
            self.con.commit()
            fine_query = f"INSERT INTO driver_violation (driver_ID, FCS, violation_ID, has_the_fine_been_paid, date_of_the_fine, sum) VALUES ({driver_ID}, '{FCS}', {violation_ID}, 0, '{self.date}', {sum + (factor * sum)});"
            self.mycursor.execute(fine_query)
            self.con.commit()
            fine_plus_query = f"UPDATE driver_list SET fine_count  = fine_count + 1 WHERE driver_ID = {driver_ID}"
            self.mycursor.execute(fine_plus_query)
            self.con.commit()
            query_keys_not_check = "SET FOREIGN_KEY_CHECKS = 1;"
            self.mycursor.execute(query_keys_not_check)
            self.con.commit()
            Success = QMessageBox()
            Success.setWindowTitle("Выполнено")
            Success.setText("Нарушение зарегестрировано")
            Success.setIcon(QMessageBox.Icon.Information)
            Success.exec()
            query = f"SELECT fine_count FROM driver_list WHERE driver_ID = {driver_ID}"
            self.mycursor.execute(query)
            self.con.commit()
            (fineCount,) = self.mycursor.fetchone()
            if (fineCount % 3 == 0):
                self.OpenSubpoenaTableForm(FCS, driver_ID)
        else:
            Error = QMessageBox()
            Error.setWindowTitle("Ошибка")
            Error.setText("Выбрана неверная дата")
            Error.setIcon(QMessageBox.Icon.Warning)
            Error.exec()
        self.FCSPlainText.clear()
        self.violationPlainText.clear()

    def OpenSubpoenaTableForm(self, FCS, driver_ID):
            SubpoenaTable = QtWidgets.QDialog()
            ui = SubpoenaTableForm.Ui_subpoena()
            ui.setupUi(SubpoenaTable, FCS, driver_ID)
            SubpoenaTable.exec()