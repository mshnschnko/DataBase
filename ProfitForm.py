# Form implementation generated from reading ui file 'ProfitForm.ui'
#
# Created by: PyQt6 UI code generator 6.2.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtCore import QDate
import bd_main

class Ui_ProfitForm(object):
    def setupUi(self, ProfitForm):
        self.con = bd_main.connect()
        self.mycursor = self.con.cursor()
        ProfitForm.setObjectName("ProfitForm")
        ProfitForm.resize(400, 185)
        self.profitLabel = QtWidgets.QLabel(ProfitForm)
        self.profitLabel.setGeometry(QtCore.QRect(0, 20, 400, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.profitLabel.setFont(font)
        self.profitLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.profitLabel.setObjectName("profitLabel")
        self.RealRadioBtn = QtWidgets.QRadioButton(ProfitForm)
        self.RealRadioBtn.setGeometry(QtCore.QRect(80, 50, 80, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.RealRadioBtn.setFont(font)
        self.RealRadioBtn.setObjectName("RealRadioBtn")
        self.PotentialRadioBtn = QtWidgets.QRadioButton(ProfitForm)
        self.PotentialRadioBtn.setGeometry(QtCore.QRect(220, 50, 115, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.PotentialRadioBtn.setFont(font)
        self.PotentialRadioBtn.setObjectName("PotentialRadioBtn")
        self.BeginDate = QtWidgets.QDateEdit(ProfitForm)
        self.BeginDate.setGeometry(QtCore.QRect(80, 90, 110, 22))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.BeginDate.setFont(font)
        self.BeginDate.setCalendarPopup(True)
        self.BeginDate.setMaximumDate(QDate.currentDate())
        self.BeginDate.setMinimumDate(QDate.currentDate().addDays(-330))
        self.BeginDate.setObjectName("BeginDate")
        self.BeginDate.setEnabled(False)
        self.EndDate = QtWidgets.QDateEdit(ProfitForm)
        self.EndDate.setGeometry(QtCore.QRect(240, 90, 110, 22))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.EndDate.setFont(font)
        self.EndDate.setCalendarPopup(True)
        self.EndDate.setMaximumDate(QDate.currentDate())
        self.EndDate.setMinimumDate(QDate.currentDate().addDays(-330))
        self.EndDate.setObjectName("EndDate")
        self.EndDate.setEnabled(False)
        self.BeginLabel = QtWidgets.QLabel(ProfitForm)
        self.BeginLabel.setGeometry(QtCore.QRect(55, 90, 10, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.BeginLabel.setFont(font)
        self.BeginLabel.setObjectName("BeginLabel")
        self.EndLabel = QtWidgets.QLabel(ProfitForm)
        self.EndLabel.setGeometry(QtCore.QRect(210, 90, 15, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.EndLabel.setFont(font)
        self.EndLabel.setObjectName("EndLabel")
        self.SumLabel = QtWidgets.QLabel(ProfitForm)
        self.SumLabel.setGeometry(QtCore.QRect(55, 140, 45, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.SumLabel.setFont(font)
        self.SumLabel.setObjectName("SumLabel")
        self.SumText = QtWidgets.QTextBrowser(ProfitForm)
        self.SumText.setGeometry(QtCore.QRect(110, 138, 80, 26))
        self.SumText.setObjectName("SumText")
        self.CalculateBtn = QtWidgets.QPushButton(ProfitForm)
        self.CalculateBtn.setGeometry(QtCore.QRect(300, 140, 75, 23))
        self.CalculateBtn.setEnabled(False)
        self.CalculateBtn.setObjectName("CalculateBtn")

        self.retranslateUi(ProfitForm)
        QtCore.QMetaObject.connectSlotsByName(ProfitForm)

        self.RadioBtns()
        #self.RealRadioBtn.clicked.connect(lambda: self.SetEnabledForCalculate())
        self.BeginDate.dateChanged.connect(lambda: self.BeginDate_slot())
        self.EndDate.dateChanged.connect(lambda: self.EndDate_slot())
        self.CalculateBtn.clicked.connect(lambda: self.Profit())

    def retranslateUi(self, ProfitForm):
        _translate = QtCore.QCoreApplication.translate
        ProfitForm.setWindowTitle(_translate("ProfitForm", "Прибыль ГАИ"))
        self.profitLabel.setText(_translate("ProfitForm", "Прибыль ГАИ"))
        self.RealRadioBtn.setText(_translate("ProfitForm", "Реальная"))
        self.PotentialRadioBtn.setText(_translate("ProfitForm", "Потенциальная"))
        self.BeginLabel.setText(_translate("ProfitForm", "С"))
        self.EndLabel.setText(_translate("ProfitForm", "По"))
        self.SumLabel.setText(_translate("ProfitForm", "Сумма:"))
        self.CalculateBtn.setText(_translate("ProfitForm", "Рассчитать"))

    def BeginDate_slot(self):
        self.BeginDate_str = self.BeginDate.date().toString('yyyy-MM-dd')
        #self.CalculateBtn.setEnabled(True)

    def EndDate_slot(self):
        self.EndDate_str = self.EndDate.date().toString('yyyy-MM-dd')
        #self.CalculateBtn.setEnabled(True)

    def SetEnabledForCalculate(self):
        self.CalculateBtn.setEnabled(True)

    def RadioBtns(self):
        self.RealRadioBtn.clicked.connect(lambda: self.SetRealProfitDate())
        self.PotentialRadioBtn.clicked.connect(lambda: self.SetPotentialProfitDate())

    def Profit(self):
        if (self.EndDate.maximumDate() == QDate.currentDate()):
            self.RealProfit()
        else:
            self.PotentialProfit()

    def SetRealProfitDate(self):
        self.BeginDate.setEnabled(True)
        self.EndDate.setEnabled(True)
        self.EndDate.setMaximumDate(QDate.currentDate())
        self.CalculateBtn.setEnabled(True)

    def SetPotentialProfitDate(self):
        self.BeginDate.setEnabled(True)
        self.EndDate.setEnabled(True)
        self.EndDate.setMaximumDate(QDate.currentDate().addDays(30))
        self.CalculateBtn.setEnabled(True)

    def RealProfit(self):
        query = f"SELECT sum, pay_date FROM bank;"
        self.mycursor.execute(query)
        self.con.commit()
        sum = 0
        allInfo = self.mycursor.fetchall()
        for i in range(0, len(allInfo)):
            if (str(allInfo[i][1]) >= self.BeginDate_str and str(allInfo[i][1]) <= self.EndDate_str):
                sum += allInfo[i][0]
        self.SumText.setText(str(sum))

    def PotentialProfit(self):
        query = f"SELECT sum, date_of_the_fine FROM driver_violation;"
        self.mycursor.execute(query)
        self.con.commit()
        sum = 0
        allInfo = self.mycursor.fetchall()
        for i in range(0, len(allInfo)):
            if (str(allInfo[i][1]) >= self.BeginDate_str and str(allInfo[i][1]) <= self.EndDate.date().addDays(-30).toString('yyyy-MM-dd')):
                sum += allInfo[i][0]
        self.SumText.setText(str(sum))