# Form implementation generated from reading ui file 'BankStatement.ui'
#
# Created by: PyQt6 UI code generator 6.2.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QHeaderView

import bd_main


class Ui_BankChecks(object):
    def setupUi(self, BankChecks):
        self.con = bd_main.connect()
        self.mycursor = self.con.cursor()
        BankChecks.setObjectName("BankChecks")
        BankChecks.resize(740, 400)
        self.BankLabel = QtWidgets.QLabel(BankChecks)
        self.BankLabel.setGeometry(QtCore.QRect(0, 30, 740, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.BankLabel.setFont(font)
        self.BankLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.BankLabel.setObjectName("BankLabel")
        self.tableWidget = QtWidgets.QTableWidget(BankChecks)
        self.tableWidget.setGeometry(QtCore.QRect(20, 110, 700, 270))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(5)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(4, item)
        self.tableWidget.horizontalHeader().setSectionResizeMode(1, QHeaderView.ResizeMode.ResizeToContents)
        self.tableWidget.verticalHeader().setVisible(False)
        self.driverEdit = QtWidgets.QPlainTextEdit(BankChecks)
        self.driverEdit.setGeometry(QtCore.QRect(90, 68, 220, 25))
        self.driverEdit.setObjectName("driverEdit")
        self.driverLabel = QtWidgets.QLabel(BankChecks)
        self.driverLabel.setGeometry(QtCore.QRect(20, 70, 60, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.driverLabel.setFont(font)
        self.driverLabel.setObjectName("driverLabel")
        self.ClearNameBtn = QtWidgets.QPushButton(BankChecks)
        self.ClearNameBtn.setGeometry(QtCore.QRect(285, 67, 27, 27))
        self.ClearNameBtn.setObjectName("ClearNameBtn")

        self.retranslateUi(BankChecks)
        QtCore.QMetaObject.connectSlotsByName(BankChecks)

        self.FillTable()
        self.driverEdit.textChanged.connect(lambda: self.NameSearch())
        self.ClearNameBtn.clicked.connect(lambda: self.ClearEnterName())

    def retranslateUi(self, BankChecks):
        _translate = QtCore.QCoreApplication.translate
        BankChecks.setWindowTitle(_translate("BankChecks", "Банковская выписка"))
        self.BankLabel.setText(_translate("BankChecks", "Банковская выписка по чекам"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("BankChecks", "ID водителя"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("BankChecks", "ФИО"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("BankChecks", "Дата оплаты"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("BankChecks", "Сумма"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("BankChecks", "Нарушение"))
        self.driverEdit.setPlaceholderText(_translate("BankChecks", "Введите имя..."))
        self.driverLabel.setText(_translate("BankChecks", "Водитель:"))
        self.ClearNameBtn.setText(_translate("BankChecks", "✕"))

    def driverEdit_slot(self):
        self.text = self.driverEdit.toPlainText()

    def NameSearch(self):
        self.tableWidget.clearContents()
        self.tableWidget.setRowCount(0)
        self.name = self.driverEdit.toPlainText()
        query = f"SELECT relation_ID, driver_ID, FCS, violation_ID FROM driver_violation WHERE FCS LIKE '%{self.name}%' and has_the_fine_been_paid = 1;"
        self.mycursor.execute(query)
        self.con.commit()
        res = self.mycursor.fetchall()
        resLen = len(res)
        for i in range(0, resLen):
            query = f"SELECT pay_date, sum FROM bank WHERE check_ID = {res[i][0]}"
            self.mycursor.execute(query)
            self.con.commit()
            (payDate, sum) = self.mycursor.fetchone()
            query = f"SELECT violation FROM violation_list WHERE violation_ID = {res[i][3]}"
            self.mycursor.execute(query)
            self.con.commit()
            (violation,) = self.mycursor.fetchone()
            self.AddRow(res[i][1], res[i][2], payDate, sum, violation)

    def ClearEnterName(self):
        self.driverEdit.clear()

    def AddRow(self, driver_ID, FCS, payDate, sum, violation):
        rowPosition = self.tableWidget.rowCount()
        self.tableWidget.insertRow(rowPosition)

        self.tableWidget.setItem(rowPosition, 0, QtWidgets.QTableWidgetItem(str(driver_ID)))
        self.tableWidget.setItem(rowPosition, 1, QtWidgets.QTableWidgetItem(FCS))
        self.tableWidget.setItem(rowPosition, 2, QtWidgets.QTableWidgetItem(str(payDate)))
        self.tableWidget.setItem(rowPosition, 3, QtWidgets.QTableWidgetItem(str(sum)))
        self.tableWidget.setItem(rowPosition, 4, QtWidgets.QTableWidgetItem(violation))

    def FillTable(self):
        query = f"SELECT * FROM bank;"
        self.mycursor.execute(query)
        self.con.commit()
        allChecks = self.mycursor.fetchall()
        countOfChecks = len(allChecks)
        self.tableWidget.clearContents()
        self.tableWidget.setRowCount(0)
        for i in range (0, countOfChecks):
            query = f"SELECT driver_ID, FCS, violation_ID FROM driver_violation WHERE relation_ID = {allChecks[i][0]} and has_the_fine_been_paid = 1"
            self.mycursor.execute(query)
            self.con.commit()
            (driver_ID, FCS, violation_ID) = self.mycursor.fetchone()
            query = f"SELECT violation FROM violation_list WHERE violation_ID = {violation_ID}"
            self.mycursor.execute(query)
            self.con.commit()
            (violation,) = self.mycursor.fetchone()
            self.AddRow(driver_ID, FCS, allChecks[i][1], allChecks[i][2], violation)